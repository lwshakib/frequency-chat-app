// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum CONVERSATION_TYPE{
  ONE_TO_ONE
  GROUP
}

enum MESSAGE_READ_STATUS{
  UNREAD
  READ
  SENT
}


model User {
  id        String @id @default(cuid())
  clerkId   String @unique
  name      String?
  email     String
  imageUrl  String?
  isOnline  Boolean @default(false)
  lastOnlineAt DateTime?
  messages  Message[]
  conversations Conversation[]
  adminConversations ConversationAdmin[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String @id @default(cuid())
  type      String @default("TEXT")
  content   String
  sender    User @relation(fields: [senderId], references: [clerkId], onDelete: Cascade)
  senderId  String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  isRead    MESSAGE_READ_STATUS @default(UNREAD)
  files     Json?
  lastMessageConversation Conversation? @relation("LastMessage")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id        String @id @default(cuid())
  name      String?
  description String?
  type      CONVERSATION_TYPE @default(ONE_TO_ONE)
  users     User[]
  messages  Message[]
  admins    ConversationAdmin[]
  lastMessageId String? @unique
  lastMessage Message? @relation("LastMessage", fields: [lastMessageId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConversationAdmin {
  id             String @id @default(cuid())
  userId         String
  user           User @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, conversationId])
}
